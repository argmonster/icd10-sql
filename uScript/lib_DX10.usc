library lib_DX10()
 %version 1.2.4 09/21/2015
 bgcolor is x
 bgcolor = "white"
 %define table_wbgcolor "width='100%'  border='1' cellspacing='0' cellpadding='0' bgcolor='" + bgcolor + "'"
 %define table_nobgcolor "width='100%'  border='1' cellspacing='0' cellpadding='0'"
 %define row_color1 "bgcolor='LightSkyBlue'"
 %define row_color2 "bgcolor='White'"
 %define row_color3 "bgcolor='PaleGreen'"
 %define row_color4 "bgcolor='LemonChiffon'" 
 %define col_color_multi "bgcolor='LightGrey'"
 %define CN_ICD10_DATE 10/1/2015

 %define CN_icd9ansiQual "BK"
 %define CN_icd10ansiQual "ABK"
 
 on load do: 
  %global o_user, o_pass, o_ds, o_db, ICD10_Table, ICD9_Table, dsn, ICD10_File, ICD9_FIle 
  o_user      is x
  o_pass      is x
  o_ds        is x
  o_db        is x
  ICD10_Table is x
  ICD9_Table  is x
  ICD10_File  is x
  ICD9_File   is x
  dsn         is x
 %include inc_DX10
 

dynamic function Set_Sql(user, pass, host, db, icd10, icd9, icd10file,icd9file) is null 
 user      is x
 pass      is x
 host      is x
 db        is x
 icd10     is x
 icd9      is x
 icd10file is x
 icd9file  is x

 if icd10 !dp then icd10 = "[t_ICD-10_ICD-10_with_GEM_AXIS]" endif
 if icd9 !dp then icd9 = "[t_ICD-10_ICD-9_with_GEM_AXIS]" endif
 
 o_user      = user
 o_pass      = pass
 o_ds        = host
 o_db        = db
 ICD10_TABLE = icd10
 ICD9_TABLE = icd9
 ICD10_FILE = icd10file
 ICD9_FILE = icd9file
 dsn = o_user + ":" + o_pass + ":" + o_ds + ":" + o_db

end Set_Sql

public dynamic function putClientDx(dx_rec, clientid, 
   effdate, staffid, recdate, rectime, recentrydate, recentrytime, recexpdate,
   c_dx10_reason, c_dx10_stat, c_dx10_primary_a,
   c_dx10_uniq[], c_dx10_comment,
   10dotted, 9dotted,
   c_dx10_a4_supgrp, c_dx10_a4_socenv, c_dx10_a4_edu, c_dx10_a4_occ, c_dx10_a4_housng, c_dx10_a4_eco, c_dx10_a4_health, c_dx10_a4_legal, c_dx10_a4_psyenv, c_dx10_a4_none, c_dx10_a5_gaf,
   c_dx10_curr_abl, c_dx10_pot_abl,
   c_dx10_iq_score, c_dx10_iq_date, c_dx10_iq_test, c_dx10_sq_score, c_dx10_sq_date, c_dx10_sq_test, 
   isConverted) is b

dx_rec               is uid
clientid             is x
effdate              is d
recdate              is d
staffid              is x
rectime              is t
recentrydate         is d
recentrytime         is t
c_dx10_reason        is x
c_dx10_stat          is x
recexpdate           is d
c_dx10_primary_a     is x
c_dx10_uniq[]        is x
10dotted             is x
9dotted              is x
c_dx10_a4_supgrp     is x
c_dx10_a4_socenv     is x
c_dx10_a4_edu        is x
c_dx10_a4_occ        is x
c_dx10_a4_housng     is x
c_dx10_a4_eco        is x
c_dx10_a4_health     is x
c_dx10_a4_legal      is x
c_dx10_a4_psyenv     is x
c_dx10_a4_none       is x
c_dx10_a5_gaf        is x
c_dx10_curr_abl      is x
c_dx10_pot_abl       is x
c_dx10_iq_score      is x
c_dx10_iq_date       is x
c_dx10_iq_test       is x
c_dx10_sq_score      is x
c_dx10_sq_date       is x
c_dx10_sq_test       is x
c_dx10_comment       is x
isConverted          is x

bad_char[]           is x
bad_char_index       is b
index                is b

 $allowupdate(dx_rec)

 bad_char[1] = "<"
 bad_char[2] = ">"
 bad_char[3] = "&"

 if isConverted !dp then
    isConverted = "N"
 endif

 if c_dx10_comment dp
  bad_char_index = 0
  do while bad_char_index++ < $maxarray(bad_char[])
   c_dx10_comment = $replace(bad_char[bad_char_index],"_",c_dx10_comment)
  enddo
 endif

 clearDsts()

 c.dx10.rh[effd]  = effdate
 dx_rec           = c.dx10.rh[uid] 
 c.dx10.staff     = staffid
 c.dx10.dt        = recdate
 c.dx10.time      = rectime
 c.dx10.entdt     = recentrydate
 c.dx10.enttm     = recentrytime
 c.dx10.reason    = c_dx10_reason
 c.dx10.stat      = c_dx10_stat
 c.dx10.expire    = recexpdate
 c.dx10.pimary.ax = c_dx10_primary_a
 c.dx10.a4.supgrp = c_dx10_a4_supgrp
 c.dx10.a4.socenv = c_dx10_a4_socenv
 c.dx10.a4.edu    = c_dx10_a4_edu  
 c.dx10.a4.occ    = c_dx10_a4_occ    
 c.dx10.a4.housng = c_dx10_a4_housng 
 c.dx10.a4.eco    = c_dx10_a4_eco    
 c.dx10.a4.health = c_dx10_a4_health 
 c.dx10.a4.legal  = c_dx10_a4_legal  
 c.dx10.a4.psyenv = c_dx10_a4_psyenv 
 c.dx10.a4.none   = c_dx10_a4_none   
 c.dx10.a5.gaf    = c_dx10_a5_gaf    
 c.dx10.curr.abl  = c_dx10_curr_abl  
 c.dx10.pot.abl   = c_dx10_pot_abl    
 c.dx10.iq.score  = c_dx10_iq_score
 c.dx10.iq.date   = c_dx10_iq_date
 c.dx10.iq.test   = c_dx10_iq_test
 c.dx10.sq.score  = c_dx10_sq_score
 c.dx10.sq.date   = c_dx10_sq_date
 c.dx10.sq.test   = c_dx10_sq_test
 c.dx10.comment   = c_dx10_comment  
 c.dx10.converted = isConverted

 index = 0
 do while index++ < $maxarray(c_dx10_uniq[])
    putCodeByRank(c_dx10_uniq[index], index, 10Dotted, 9Dotted)
 enddo

 $dblock()
 putClientDx =  $dbpoint(2, clientid, c.dx10.rh)
 putClientDx =  $dbadddst(2, clientid, dx10_dstlist)

end putClientDx

private dynamic function clearDsts() is void
$clear(c.dx10.rh,c.dx10.staff,c.dx10.entstaff,c.dx10.dt,c.dx10.time,c.dx10.entdt,c.dx10.enttm,c.dx10.caredt,c.dx10.reason,c.dx10.expire,c.dx10.pimary.ax,
c.dx10.icd10.1,c.dx10.icd9.1,c.dx10.legax.1,c.dx10.dxcat.1,c.dx10.dxrank.1,c.dx10.uniq.1,c.dx10.icd10.2,c.dx10.icd9.2,c.dx10.legax.2,c.dx10.dxcat.2,c.dx10.dxrank.2,c.dx10.uniq.2,
c.dx10.icd10.3,c.dx10.icd9.3,c.dx10.legax.3,c.dx10.dxcat.3,c.dx10.dxrank.3,c.dx10.uniq.3,c.dx10.icd10.4,c.dx10.icd9.4,c.dx10.legax.4,c.dx10.dxcat.4,c.dx10.dxrank.4,c.dx10.uniq.4,
c.dx10.icd10.5,c.dx10.icd9.5,c.dx10.legax.5,c.dx10.dxcat.5,c.dx10.dxrank.5,c.dx10.uniq.5,c.dx10.icd10.6,c.dx10.icd9.6,c.dx10.legax.6,c.dx10.dxcat.6,c.dx10.dxrank.6,c.dx10.uniq.6,
c.dx10.icd10.7,c.dx10.icd9.7,c.dx10.legax.7,c.dx10.dxcat.7,c.dx10.dxrank.7,c.dx10.uniq.7,c.dx10.icd10.8,c.dx10.icd9.8,c.dx10.legax.8,c.dx10.dxcat.8,c.dx10.dxrank.8,c.dx10.uniq.8,
c.dx10.icd10.9,c.dx10.icd9.9,c.dx10.legax.9,c.dx10.dxcat.9,c.dx10.dxrank.9,c.dx10.uniq.9,c.dx10.icd10.10,c.dx10.icd9.10,c.dx10.legax.10,c.dx10.dxcat.10,c.dx10.dxrank.10,c.dx10.uniq.10,
c.dx10.icd10.11,c.dx10.icd9.11,c.dx10.legax.11,c.dx10.dxcat.11,c.dx10.dxrank.11,c.dx10.uniq.11,c.dx10.icd10.12,c.dx10.icd9.12,c.dx10.legax.12,c.dx10.dxcat.12,c.dx10.dxrank.12,c.dx10.uniq.12,
c.dx10.icd10.13,c.dx10.icd9.13,c.dx10.legax.13,c.dx10.dxcat.13,c.dx10.dxrank.13,c.dx10.uniq.13,c.dx10.icd10.14,c.dx10.icd9.14,c.dx10.legax.14,c.dx10.dxcat.14,c.dx10.dxrank.14,c.dx10.uniq.14,
c.dx10.icd10.15,c.dx10.icd9.15,c.dx10.legax.15,c.dx10.dxcat.15,c.dx10.dxrank.15,c.dx10.uniq.15,c.dx10.icd10.16,c.dx10.icd9.16,c.dx10.legax.16,c.dx10.dxcat.16,c.dx10.dxrank.16,c.dx10.uniq.16,
c.dx10.a4.supgrp,c.dx10.a4.socenv,c.dx10.a4.edu,c.dx10.a4.occ,c.dx10.a4.housng,c.dx10.a4.eco,c.dx10.a4.health,c.dx10.a4.legal,c.dx10.a4.psyenv,c.dx10.a4.none,c.dx10.a5.gaf,c.dx10.curr.abl,c.dx10.pot.abl,
c.dx10.comment,c.dx10.snapid,c.dx10.isn,c.dx10.stat, c.dx10.converted,
c.dx10.iq.score, c.dx10.iq.date, c.dx10.iq.test,
c.dx10.sq.score, c.dx10.sq.date, c.dx10.sq.test)
end clearDsts

private dynamic function putCodeByRank (codeid, Rank, 10dotted, 9dotted) is void
   codeid            is x
   rank              is b
   10dotted          is x
   9dotted           is x

   save_selected     is x
   uniqid            is x
   icd_code          is x
   icd_code_dotnt    is x
   icd_description   is x
   icd_code2         is x
   icd_code_dotnt2   is x
   icd_Description2  is x
   dsm_4_axis        is x
   dx_cat            is x

   save_code1        is x
   save_code2        is x

   if codeid !dp then
      return
   endif

   save_selected = DX_Uniq_Query(codeid)
   (void)$parsem(save_selected,1,"|",UniqID,ICD_Code,ICD_Code_DotNt,ICD_Description,
      ICD_Code2,ICD_Code_DotNt2,ICD_Description2,DSM_4_Axis,,,,,,DX_Cat)

   if 10dotted = "Y" then
      save_code1 = ICD_Code_DotNt
   else
      save_code1 = ICD_code
   endif
   if 9Dotted = "Y" then
      save_code2 = ICD_code_Dotnt2
   else
      save_code2 = ICD_code2
   endif
   select rank
      case 1 gosub _RANK1
      case 2 gosub _RANK2
      case 3 gosub _RANK3
      case 4 gosub _RANK4
      case 5 gosub _RANK5
      case 6 gosub _RANK6
      case 7 gosub _RANK7
      case 8 gosub _RANK8
      case 9 gosub _RANK9
      case 10 gosub _RANK10
      case 11 gosub _RANK11
      case 12 gosub _RANK12
      case 13 gosub _RANK13
      case 14 gosub _RANK14
      case 15 gosub _RANK15
      case 16 gosub _RANK16
   endselect
   'exit before the subs
   return

   'update the globals
   _RANK1:
    c.dx10.icd10.1 = save_code1
    c.dx10.icd9.1  = ICD_Code2
    c.dx10.legax.1  = DSM_4_Axis
    c.dx10.dxcat.1  = DX_Cat
    c.dx10.dxrank.1 = rank
    c.dx10.uniq.1   = UniqID
   goback
   _RANK2:
    c.dx10.icd10.2 = save_code1
    c.dx10.icd9.2  = save_code2
    c.dx10.legax.2  = DSM_4_Axis
    c.dx10.dxcat.2  = DX_Cat
    c.dx10.dxrank.2 = rank
    c.dx10.uniq.2   = UniqID
   goback
   _RANK3:
    c.dx10.icd10.3 = save_code1
    c.dx10.icd9.3  = save_code2
    c.dx10.legax.3  = DSM_4_Axis
    c.dx10.dxcat.3  = DX_Cat
    c.dx10.dxrank.3 = rank
    c.dx10.uniq.3   = UniqID
   goback
   _RANK4:
    c.dx10.icd10.4 = save_code1
    c.dx10.icd9.4  = save_code2
    c.dx10.legax.4  = DSM_4_Axis
    c.dx10.dxcat.4  = DX_Cat
    c.dx10.dxrank.4 = rank
    c.dx10.uniq.4   = UniqID
   goback
   _RANK5:
    c.dx10.icd10.5 = save_code1
    c.dx10.icd9.5  = save_code2
    c.dx10.legax.5  = DSM_4_Axis
    c.dx10.dxcat.5  = DX_Cat
    c.dx10.dxrank.5 = rank
    c.dx10.uniq.5   = UniqID
   goback
   _RANK6:
    c.dx10.icd10.6 = save_code1
    c.dx10.icd9.6  = save_code2
    c.dx10.legax.6  = DSM_4_Axis
    c.dx10.dxcat.6  = DX_Cat
    c.dx10.dxrank.6 = rank
    c.dx10.uniq.6   = UniqID
   goback
   _RANK7:
    c.dx10.icd10.7 = save_code1
    c.dx10.icd9.7  = save_code2
    c.dx10.legax.7  = DSM_4_Axis
    c.dx10.dxcat.7  = DX_Cat
    c.dx10.dxrank.7 = rank
    c.dx10.uniq.7   = UniqID
   goback
   _RANK8:
    c.dx10.icd10.8 = save_code1
    c.dx10.icd9.8  = save_code2
    c.dx10.legax.8  = DSM_4_Axis
    c.dx10.dxcat.8  = DX_Cat
    c.dx10.dxrank.8 = rank
    c.dx10.uniq.8   = UniqID
   goback
   _RANK9:
    c.dx10.icd10.9 = save_code1
    c.dx10.icd9.9  = save_code2
    c.dx10.legax.9  = DSM_4_Axis
    c.dx10.dxcat.9  = DX_Cat
    c.dx10.dxrank.9 = rank
    c.dx10.uniq.9   = UniqID
   goback
   _RANK10:
    c.dx10.icd10.10 = save_code1
    c.dx10.icd9.10  = save_code2
    c.dx10.legax.10  = DSM_4_Axis
    c.dx10.dxcat.10  = DX_Cat
    c.dx10.dxrank.10 = rank
    c.dx10.uniq.10   = UniqID
   goback
   _RANK11:
    c.dx10.icd10.11 = save_code1
    c.dx10.icd9.11  = save_code2
    c.dx10.legax.11  = DSM_4_Axis
    c.dx10.dxcat.11  = DX_Cat
    c.dx10.dxrank.11 = rank
    c.dx10.uniq.11   = UniqID
   goback
   _RANK12:
    c.dx10.icd10.12 = save_code1
    c.dx10.icd9.12  = save_code2
    c.dx10.legax.12  = DSM_4_Axis
    c.dx10.dxcat.12  = DX_Cat
    c.dx10.dxrank.12 = rank
    c.dx10.uniq.12   = UniqID
   goback
   _RANK13:
    c.dx10.icd10.13 = save_code1
    c.dx10.icd9.13  = save_code2
    c.dx10.legax.13  = DSM_4_Axis
    c.dx10.dxcat.13  = DX_Cat
    c.dx10.dxrank.13 = rank
    c.dx10.uniq.13   = UniqID
   goback
   _RANK14:
    c.dx10.icd10.14 = save_code1
    c.dx10.icd9.14  = save_code2
    c.dx10.legax.14  = DSM_4_Axis
    c.dx10.dxcat.14  = DX_Cat
    c.dx10.dxrank.14 = rank
    c.dx10.uniq.14   = UniqID
   goback
   _RANK15:
    c.dx10.icd10.15 = save_code1
    c.dx10.icd9.15  = save_code2
    c.dx10.legax.15  = DSM_4_Axis
    c.dx10.dxcat.15  = DX_Cat
    c.dx10.dxrank.15 = rank
    c.dx10.uniq.15   = UniqID
   goback
   _RANK16:
    c.dx10.icd10.16 = save_code1
    c.dx10.icd9.16  = save_code2
    c.dx10.legax.16  = DSM_4_Axis
    c.dx10.dxcat.16  = DX_Cat
    c.dx10.dxrank.16 = rank
    c.dx10.uniq.16   = UniqID
   goback
end putCodeByRank

dynamic function DX_Lookup(selection[],10DOTTED,9DOTTED) is null
 10DOTTED         is x
 9DOTTED          is x
 search_field     is x
 rc				  is i
 last_query       is x
 skip             is b
 query_any        is x 
 query_txt		  is x
 query_txt_arr[]  is x
 cnt_query		  is i
 o_sql		      is x		
 result[]	      is x
 all_results[]    is x
 CodeID		      is x
 FileData[]	      is x 
 selected[]       is x
 return_btn       is x 
 selection[]      is x
 index            is i
 UniqID           is x
 ICD_Code         is x
 ICD_Code_DotNt   is x
 ICD_Description  is x
 ICD_Code2        is x
 ICD_Code_DotNt2  is x
 ICD_Description2 is x
 DSM_4_Axis       is x
 Approximate      is x
 NoMap            is x
 Combination      is x
 Scenario         is x
 ChoiceList       is x
 DX_Cat           is x
 TermSearch       is x
 EffDt            is d
 EndDt            is d
 if 10DOTTED !dp
  10DOTTED = "Y" 
 endif
 if 9DOTTED !dp
  9DOTTED = "Y"
 endif 

 $looplimit = 0
 $clear(selected[],search_field,all_results[])
 {"LIB-freetds"}setDSN(dsn)
 $submitopt("off", "Search")
 $cancelopt("off", "Cancel")
 do until $endbutton = "CANCEL"
  $form($scriptid)
   $stylesheet("../cmhcbuilocal/styles/Buttons.css", "R")
   $text("Enter DX Search Terms, either code or description. Multiple items can be searched for if they are separated by a coma","siginfo")$textbox(query_any,,50,60)   
   $br()$text("Example: bipolar,schiz","inst")
'   if o_sql dp
'    $br()$text(o_sql,"inst")
 '  endif	
   $br(3)  
   if all_results[1] dp
    $navbutton(return_btn, "Use Selection") 
    index = 0
  	$table($funcname)
     $row()
	  $col()$text($maxarray(all_results[]))
      $col()$text("ICD 10 Code")
'      $col()$text("ICD 10 Code Dot Notation")
      $col()$text("ICD 10 Description")
'      $col()$text("ICD 9 Code")
      $col()$text("ICD 9 Code Dot Notation")
      $col()$text("ICD 9 Description")   
      $col()$text("DSM 4 Axis")
'      $col()$text("Approximate")
'      $col()$text("NoMap")
'      $col()$text("Combination")
'      $col()$text("Scenario")
'      $col()$text("ChoiceList")		
      $col()$text("DX Cat")        
	  $row()
	   $col()$tag("<hr/>")
	   $col()$tag("<hr/>")
'	   $col()$tag("<hr/>")
	   $col()$tag("<hr/>")
'	   $col()$tag("<hr/>")
	   $col()$tag("<hr/>")
	   $col()$tag("<hr/>")
	   $col()$tag("<hr/>")
'	   $col()$tag("<hr/>")
'	   $col()$tag("<hr/>")
'	   $col()$tag("<hr/>")
'	   $col()$tag("<hr/>")
'	   $col()$tag("<hr/>")
       $col()$tag("<hr/>")
	 do while index++ < $maxarray(all_results[])
	  (void)$parsem(all_results[index],1,"|",UniqID,ICD_Code,ICD_Code_DotNt,ICD_Description,ICD_Code2,ICD_Code_DotNt2,ICD_Description2,DSM_4_Axis,Approximate,NoMap,Combination,Scenario,ChoiceList,DX_Cat,TermSearch,EffDt,EndDt)
	  if $mod(index,2) = 0
	   $row()
	  else
	   $row(,"bgcolor='99ccff'")
	  endif 
	   $col()$checkbox(selected[index],,UniqID)
       if 10DOTTED = "Y"
	    $col()$text(ICD_Code_DotNt)
	   else
	    $col()$text(ICD_Code)
       endif	

	   $col()$text(ICD_Description)
	   if 9DOTTED = "Y"
	    $col()$text(ICD_Code_DotNt2)
	   else
	    $col()$text(ICD_Code2)
	   endif	
	   $col()$text(ICD_Description2)
	   $col()$text(DSM_4_Axis)
'	   $col()$text(Approximate)
'	   $col()$text(NoMap)
'	   $col()$text(Combination)
'	   $col()$text(Scenario)
'	   $col()$text(ChoiceList)
      $col()$text(DX_Cat)
	 enddo
	$endtable($funcname)
   else
  	$text("No Results Yet")  
   endif  
  $sendform($funcname)
  select $endbutton
   case "CANCEL" return
   case "SUBMIT" $clear(query_txt_arr[])
                 if $len(query_any) > 1
			      query_txt = query_any
			      $parsem(query_txt,1,",",query_txt_arr[])
				 else
                  {"lib_txaceUI"}msgbox("Please enter a longer search term",1,"Alert","Ok")									   											
			     endif	
                 skip = 0
				 cnt_query = $maxarray(query_txt_arr[])
				 if last_query dp and last_query = query_txt
                  cnt_query = $maxarray(query_txt_arr[])				   
				  skip = 1
				 endif
				 if cnt_query = 0
				  skip = 1
				 endif		   	
	             index = 1	
	             if skip = 0
				  $clear(all_results[],result[])
                  o_sql = "select * from " + ICD10_table + " where [TermSearch] like '%" + query_txt_arr[index] + "%'" 
                  do while index++ < cnt_query	 		 								  
                   o_sql += " and [TermSearch] like '%" + query_txt_arr[index] + "%'" 								 						  						  								  								  
                  enddo				   
				  o_sql += " and EffDt <= '" + $today + "' and (EndDt > '" + $today + "' or EndDt is null)"
                  rc = {"LIB-freetds"}q(o_sql, result[])
                  (void)$arrcopy(result[],all_results[])								 
                  last_query = query_txt 				   
                 endif
   case other $allowupdate(selection[])
	          index = 0
	          do while index++ < $maxarray(all_results[])
	           if selected[index] dp   
	            (void)$arrpush(selection[],all_results[index])
				(void)$sortu(selection[])
				(void)$arrcompress(selection[])
	           endif
	          enddo
			  return  
  endselect
 enddo
end DX_Lookup 

function 10_Desc_lookup(UniqID,ICD10_9) is x
 UniqID  is x
 ICD10_9 is x
 o_sql   is x
 results is x
 rc      is i
 {"LIB-freetds"}setDSN(dsn)
 select ICD10_9
  case "ICD10"  o_sql = "select [ICD-10_Description] from " + ICD10_table + " where [UniqID] = '" + uniqid + "'" 
  case "ICD9"   o_sql = "select [ICD-9_Description] from " + ICD9_table + " where [UniqID] = '" + uniqid + "'" 
  case "ICD109" o_sql = "select [ICD-10_Description] from " + ICD9_table + " where [UniqID] = '" + uniqid + "'" 
  case other    o_sql = "select [ICD-10_Description] from " + ICD10_table + " where [UniqID] = '" + uniqid + "'" 
 endselect
 rc = {"LIB-freetds"}q(o_sql, results)
 results = $replace("|","",results)
 10_Desc_Lookup = results
end 10_Desc_Lookup

function 9_Desc_lookup(UniqID) is x
 UniqID      is x
 o_sql       is x
 results     is x
 rc          is i
 {"LIB-freetds"}setDSN(dsn)
 o_sql = "select [ICD-9_Description] from " + ICD10_table + " where [UniqID] = '" + uniqid + "'" 
 rc = {"LIB-freetds"}q(o_sql, results)
 9_Desc_Lookup = results
end 9_Desc_Lookup

function DX_Uniq_Query(UniqID) is x
 UniqID  is x
 o_sql   is x
 results is x
 rc      is i
 {"LIB-freetds"}setDSN(dsn)
 o_sql = "select * from " + ICD10_table + " where [UniqID] = '" + uniqid + "'" 
 rc = {"LIB-freetds"}q(o_sql, results)
 DX_Uniq_Query = results
end DX_Uniq_Query

function PreviousGaf(gaf_dst) is x
 rc      is i
 gaf_dst is x
 rc = $dbread(2,$regid,c.dx10.rh,c.dx10.a5.gaf)
 if c.dx10.rh dp
  if c.dx10.a5.gaf dp
   PreviousGaf = c.dx10.a5.gaf
  else
   $clear(PreviousGaf)
  endif 
 elseif gaf_dst dp
  PreviousGaf = dst_value($regid,,gaf_dst)
 endif 
end PreviousGaf

function NoDX_Lookup(axis) is x
 axis    is x
 rc      is i
 o_sql   is x
 results is x
 {"LIB-freetds"}setDSN(dsn)
 select axis
  case "1" o_sql = "select *  FROM " + ICD10_table + " where [ICD-10_Code] = 'Z0389' and [DSM-4_Axis] = '1' and EffDt <= '" + $today + "' and (EndDt > '" + $today + "' or EndDt is null)"
  case "2" o_sql = "select *  FROM " + ICD10_table + " where [ICD-10_Code] = 'Z0389' and [DSM-4_Axis] = '2' and EffDt <= '" + $today + "' and (EndDt > '" + $today + "' or EndDt is null)"
  case "3" o_sql = "select *  FROM " + ICD10_table + " where [ICD-10_Code] = 'None' and [DSM-4_Axis] = '3' and EffDt <= '" + $today + "' and (EndDt > '" + $today + "' or EndDt is null)"
  case other return
 endselect 
 rc = {"LIB-freetds"}q(o_sql, results)
 NoDX_Lookup = results  
end NoDX_Lookup

function getclientdx(client_id, as_of_date, dx_rec, dx_date, dx_time, dx_primary, dx_reason, dx10_code[], dx_rank[], dx_axis[], dx9_code[], dx_batchdt,dx_cat[],DX10_axis1[],DX9_axis1[],DX10_axis2[],DX9_axis2[],DX10_axis3[],DX9_axis3[],
                     DX_uniqid[],dx_converted) is i
 client_id    is x
 as_of_date   is d
 dx_rec       is uid
 dx_date      is d
 dx_time      is t
 dx_primary   is x
 dx_reason    is x
 dx10_code[]  is x
 dx_rank[]    is x
 dx_axis[]    is x
 dx9_code[]   is x
 dx_batchdt   is d
 dx_cat[]     is x
 DX10_axis1[] is x
 DX9_axis1[]  is x
 DX10_axis2[] is x
 DX9_axis2[]  is x
 DX10_axis3[] is x
 DX9_axis3[]  is x
 DX_uniqid[]  is x
 dx_converted is x
 
 if as_of_date !dp
  as_of_date = $today
 endif
 $clear(dx10_code[], dx_rank[], dx_axis[], dx9_code[], dx_rec, dx_date, dx_time, dx_primary, dx_reason, dx_batchdt,dx_cat[],DX10_axis1[],DX9_axis1[],DX10_axis2[],DX9_axis2[],DX10_axis3[],DX9_axis3[],DX_uniqid[],dx_converted)
 $allowupdate(dx10_code[], dx_rank[], dx_axis[], dx9_code[], dx_rec, dx_date, dx_time, dx_primary, dx_reason, dx_batchdt,dx_cat[],DX10_axis1[],DX9_axis1[],DX10_axis2[],DX9_axis2[],DX10_axis3[],DX9_axis3[],DX_uniqid[],dx_converted)

 $dblock()
 getClientDx = $dbread(2,client_id,dx10_dstlist)
 do while c.dx10.dt > as_of_date
  getClientDx = $dbreadnextdst(2,client_id,dx10_dstlist) 
 enddo
 fillclientdx(dx_rec, dx_date, dx_time, dx_primary, dx_reason, 
    dx10_code[], dx_rank[], dx_axis[], dx9_code[], dx_batchdt,dx_cat[],
    DX10_axis1[],DX9_axis1[],DX10_axis2[],DX9_axis2[],DX10_axis3[],DX9_axis3[],DX_uniqid[],dx_converted)

 $dbunlock()
end getclientdx

public dynamic function getUnbatchCltDx(client_id, as_of_date, dx_rec, dx_date, dx_time, dx_primary, dx_reason, 
   dx10_code[], dx_rank[], dx_axis[], dx9_code[], dx_batchdt,dx_cat[],DX10_axis1[],DX9_axis1[],DX10_axis2[],DX9_axis2[],DX10_axis3[],DX9_axis3[],
   DX_uniqid[],dx_converted) is i
 client_id    is x
 as_of_date   is d
 dx_rec       is uid
 dx_date      is d
 dx_time      is t
 dx_primary   is x
 dx_reason    is x
 dx10_code[]  is x
 dx_rank[]    is x
 dx_axis[]    is x
 dx9_code[]   is x
 dx_batchdt   is d
 dx_cat[]     is x
 DX10_axis1[] is x
 DX9_axis1[]  is x
 DX10_axis2[] is x
 DX9_axis2[]  is x
 DX10_axis3[] is x
 DX9_axis3[]  is x
 DX_uniqid[]  is x
 dx_converted is x
 
 if as_of_date !dp
  as_of_date = $today
 endif

 $clear(dx10_code[], dx_rank[], dx_axis[], dx9_code[], dx_rec, dx_date, dx_time, dx_primary, dx_reason, dx_batchdt,dx_cat[],DX10_axis1[],DX9_axis1[],DX10_axis2[],DX9_axis2[],DX10_axis3[],DX9_axis3[],DX_uniqid[],dx_converted)
 $allowupdate(dx10_code[], dx_rank[], dx_axis[], dx9_code[], dx_rec, dx_date, dx_time, dx_primary, dx_reason, dx_batchdt,dx_cat[],DX10_axis1[],DX9_axis1[],DX10_axis2[],DX9_axis2[],DX10_axis3[],DX9_axis3[],DX_uniqid[],dx_converted)


 getUnbatchCltDx = getclientdx(client_id, as_of_date, dx_rec, dx_date, dx_time, dx_primary, dx_reason, 
   dx10_code[], dx_rank[], dx_axis[], dx9_code[], dx_batchdt,dx_cat[], DX10_axis1[],DX9_axis1[],DX10_axis2[],DX9_axis2[],DX10_axis3[],DX9_axis3[],DX_uniqid[],dx_converted)

 ' we only want unbatched records
 if dx_batchdt !dp
   ' we want to find the earliest unbatched layer
   $dblock()
   getUnbatchCltDx = $dbreadnextdst(2, client_id, dx10_dstlist)
   do while c.dx10.caredt !dp and getUnbatchCltDx < 2
      'if the next record is unbatched - clear the previous one
      $clear(dx_rec, dx_date, dx_time, dx_primary, dx_reason, 
         dx10_code[], dx_rank[], dx_axis[], dx9_code[], dx_batchdt,dx_cat[],
         DX10_axis1[],DX9_axis1[],DX10_axis2[],DX9_axis2[],DX10_axis3[],DX9_axis3[],
		 DX_uniqid[],dx_converted)
      'now fill the the record with the current layer
      getUnbatchCltDx = fillclientdx(dx_rec, dx_date, dx_time, dx_primary, dx_reason, 
         dx10_code[], dx_rank[], dx_axis[], dx9_code[], dx_batchdt,dx_cat[],
         DX10_axis1[],DX9_axis1[],DX10_axis2[],DX9_axis2[],DX10_axis3[],DX9_axis3[],
		 DX_uniqid[],dx_converted)

      getUnbatchCltDx = $dbreadnextdst(2, client_id, dx10_dstlist)
   enddo
 else 
   ' return nothing if everything is batched
   $clear(dx10_code[], dx_rank[], dx_axis[], dx9_code[], dx_rec, dx_date, dx_time, dx_primary, dx_reason, dx_batchdt,dx_cat[],DX10_axis1[],DX9_axis1[],DX10_axis2[],DX9_axis2[],DX10_axis3[],DX9_axis3[],DX_uniqid[],dx_converted)

 endif 
 $dbunlock()

end getUnbatchCltDx

private dynamic function fillclientdx(dx_rec, dx_date, dx_time, dx_primary, dx_reason, dx10_code[], dx_rank[], dx_axis[], dx9_code[], dx_batchdt, dx_cat[], DX10_axis1[],DX9_axis1[],DX10_axis2[],DX9_axis2[],DX10_axis3[],DX9_axis3[],
                                      dx_uniqid[],dx_converted) is i 
 dx_rec       is uid
 dx_date      is d
 dx_time      is t
 dx_primary   is x
 dx_reason    is x
 dx10_code[]  is x
 dx_rank[]    is x
 dx_axis[]    is x
 dx9_code[]   is x
 dx_batchdt   is d
 dx_cat[]     is x
 DX10_axis1[] is x
 DX9_axis1[]  is x
 DX10_axis2[] is x
 DX9_axis2[]  is x
 DX10_axis3[] is x
 DX9_axis3[]  is x
 DX_UniqID[]  is x
 dx_converted is x
 index        is i   

 $allowupdate(dx10_code[], dx_rank[], dx_axis[], dx9_code[], dx_rec, dx_date, dx_time, dx_primary, dx_reason, dx_batchdt,dx_cat[],DX10_axis1[],DX9_axis1[],DX10_axis2[],DX9_axis2[],DX10_axis3[],DX9_axis3[],DX_UniqID[],dx_converted)

 'dx_rec = $castn(c.dx10.rh)
 dx_rec = c.dx10.rh[uid]
 dx_rec[effd] = c.dx10.rh[effd]
 dx_date = c.dx10.dt
 dx_time = c.dx10.time
 dx_primary = c.dx10.pimary.ax
 dx_reason = c.dx10.reason  
 dx_batchdt = c.dx10.caredt
 dx_converted = c.dx10.converted

 if c.dx10.uniq.1 dp
  (void)$arrpush(dx10_code[],c.dx10.icd10.1)
  (void)$arrpush(dx9_code[],c.dx10.icd9.1)
  (void)$arrpush(dx_rank[],c.dx10.dxrank.1)  
  (void)$arrpush(dx_axis[],c.dx10.legax.1)
  (void)$arrpush(dx_cat[],c.dx10.dxcat.1)
  (void)$arrpush(dx_uniqid[],c.dx10.uniq.1)
 endif
 if c.dx10.uniq.2 dp
  (void)$arrpush(dx10_code[],c.dx10.icd10.2)
  (void)$arrpush(dx9_code[],c.dx10.icd9.2)
  (void)$arrpush(dx_rank[],c.dx10.dxrank.2)  
  (void)$arrpush(dx_axis[],c.dx10.legax.2) 
  (void)$arrpush(dx_cat[],c.dx10.dxcat.2)  
  (void)$arrpush(dx_uniqid[],c.dx10.uniq.2)  
 endif
 if c.dx10.uniq.3 dp
  (void)$arrpush(dx10_code[],c.dx10.icd10.3)
  (void)$arrpush(dx9_code[],c.dx10.icd9.3)
  (void)$arrpush(dx_rank[],c.dx10.dxrank.3)  
  (void)$arrpush(dx_axis[],c.dx10.legax.3)
  (void)$arrpush(dx_cat[],c.dx10.dxcat.3)
  (void)$arrpush(dx_uniqid[],c.dx10.uniq.3)
 endif
 if c.dx10.uniq.4 dp
  (void)$arrpush(dx10_code[],c.dx10.icd10.4)
  (void)$arrpush(dx9_code[],c.dx10.icd9.4)
  (void)$arrpush(dx_rank[],c.dx10.dxrank.4)  
  (void)$arrpush(dx_axis[],c.dx10.legax.4) 
  (void)$arrpush(dx_cat[],c.dx10.dxcat.4)
  (void)$arrpush(dx_uniqid[],c.dx10.uniq.4)  
 endif
 if c.dx10.uniq.5 dp
  (void)$arrpush(dx10_code[],c.dx10.icd10.5)
  (void)$arrpush(dx9_code[],c.dx10.icd9.5)
  (void)$arrpush(dx_rank[],c.dx10.dxrank.5)  
  (void)$arrpush(dx_axis[],c.dx10.legax.5) 
  (void)$arrpush(dx_cat[],c.dx10.dxcat.5)
  (void)$arrpush(dx_uniqid[],c.dx10.uniq.5)    
 endif
 if c.dx10.uniq.6 dp
  (void)$arrpush(dx10_code[],c.dx10.icd10.6)
  (void)$arrpush(dx9_code[],c.dx10.icd9.6)
  (void)$arrpush(dx_rank[],c.dx10.dxrank.6)  
  (void)$arrpush(dx_axis[],c.dx10.legax.6) 
  (void)$arrpush(dx_cat[],c.dx10.dxcat.6)
  (void)$arrpush(dx_uniqid[],c.dx10.uniq.6)    
 endif
 if c.dx10.uniq.7 dp
  (void)$arrpush(dx10_code[],c.dx10.icd10.7)
  (void)$arrpush(dx9_code[],c.dx10.icd9.7)
  (void)$arrpush(dx_rank[],c.dx10.dxrank.7)  
  (void)$arrpush(dx_axis[],c.dx10.legax.7) 
  (void)$arrpush(dx_cat[],c.dx10.dxcat.7)
  (void)$arrpush(dx_uniqid[],c.dx10.uniq.7)    
 endif
 if c.dx10.uniq.8 dp
  (void)$arrpush(dx10_code[],c.dx10.icd10.8)
  (void)$arrpush(dx9_code[],c.dx10.icd9.8)
  (void)$arrpush(dx_rank[],c.dx10.dxrank.8)  
  (void)$arrpush(dx_axis[],c.dx10.legax.8) 
  (void)$arrpush(dx_cat[],c.dx10.dxcat.8)
  (void)$arrpush(dx_uniqid[],c.dx10.uniq.8)    
 endif
 if c.dx10.uniq.9 dp
  (void)$arrpush(dx10_code[],c.dx10.icd10.9)
  (void)$arrpush(dx9_code[],c.dx10.icd9.9)
  (void)$arrpush(dx_rank[],c.dx10.dxrank.9)  
  (void)$arrpush(dx_axis[],c.dx10.legax.9) 
  (void)$arrpush(dx_cat[],c.dx10.dxcat.9)
  (void)$arrpush(dx_uniqid[],c.dx10.uniq.9)    
 endif
 if c.dx10.uniq.10 dp
  (void)$arrpush(dx10_code[],c.dx10.icd10.10)
  (void)$arrpush(dx9_code[],c.dx10.icd9.10)
  (void)$arrpush(dx_rank[],c.dx10.dxrank.10)  
  (void)$arrpush(dx_axis[],c.dx10.legax.10) 
  (void)$arrpush(dx_cat[],c.dx10.dxcat.10)
  (void)$arrpush(dx_uniqid[],c.dx10.uniq.10)    
 endif
 if c.dx10.uniq.11 dp
  (void)$arrpush(dx10_code[],c.dx10.icd10.11)
  (void)$arrpush(dx9_code[],c.dx10.icd9.11)
  (void)$arrpush(dx_rank[],c.dx10.dxrank.11)  
  (void)$arrpush(dx_axis[],c.dx10.legax.11) 
  (void)$arrpush(dx_cat[],c.dx10.dxcat.11)
  (void)$arrpush(dx_uniqid[],c.dx10.uniq.11)    
 endif
 if c.dx10.uniq.12 dp
  (void)$arrpush(dx10_code[],c.dx10.icd10.12)
  (void)$arrpush(dx9_code[],c.dx10.icd9.12)
  (void)$arrpush(dx_rank[],c.dx10.dxrank.12)  
  (void)$arrpush(dx_axis[],c.dx10.legax.12) 
  (void)$arrpush(dx_cat[],c.dx10.dxcat.12)  
  (void)$arrpush(dx_uniqid[],c.dx10.uniq.12)
 endif
 if c.dx10.uniq.13 dp
  (void)$arrpush(dx10_code[],c.dx10.icd10.13)
  (void)$arrpush(dx9_code[],c.dx10.icd9.13)
  (void)$arrpush(dx_rank[],c.dx10.dxrank.13)  
  (void)$arrpush(dx_axis[],c.dx10.legax.13) 
  (void)$arrpush(dx_cat[],c.dx10.dxcat.13)  
  (void)$arrpush(dx_uniqid[],c.dx10.uniq.13)
 endif
 if c.dx10.uniq.14 dp
  (void)$arrpush(dx10_code[],c.dx10.icd10.14)
  (void)$arrpush(dx9_code[],c.dx10.icd9.14)
  (void)$arrpush(dx_rank[],c.dx10.dxrank.14)  
  (void)$arrpush(dx_axis[],c.dx10.legax.14) 
  (void)$arrpush(dx_cat[],c.dx10.dxcat.14)  
  (void)$arrpush(dx_uniqid[],c.dx10.uniq.14)
 endif
 if c.dx10.uniq.15 dp
  (void)$arrpush(dx10_code[],c.dx10.icd10.15)
  (void)$arrpush(dx9_code[],c.dx10.icd9.15)
  (void)$arrpush(dx_rank[],c.dx10.dxrank.15)  
  (void)$arrpush(dx_axis[],c.dx10.legax.15) 
  (void)$arrpush(dx_cat[],c.dx10.dxcat.15)  
  (void)$arrpush(dx_uniqid[],c.dx10.uniq.15)  
 endif
 if c.dx10.uniq.16 dp
  (void)$arrpush(dx10_code[],c.dx10.icd10.16)
  (void)$arrpush(dx9_code[],c.dx10.icd9.16)
  (void)$arrpush(dx_rank[],c.dx10.dxrank.16)  
  (void)$arrpush(dx_axis[],c.dx10.legax.16) 
  (void)$arrpush(dx_cat[],c.dx10.dxcat.16)
  (void)$arrpush(dx_uniqid[],c.dx10.uniq.16)    
 endif
 index = 0
 do while index++ < $maxarray(dx10_code[])
  select dx_axis[index]
   case "1" (void)$arrpush(DX10_axis1[],dx10_code[index])
            (void)$arrpush(DX9_axis1[],dx9_code[index])
   case "2" (void)$arrpush(DX10_axis2[],dx10_code[index])
            (void)$arrpush(DX9_axis2[],dx9_code[index])   
   case "3" (void)$arrpush(DX10_axis3[],dx10_code[index])
            (void)$arrpush(DX9_axis3[],dx9_code[index])   
  endselect 
 enddo 
end fillclientdx  

'To be removed, required by CARE-SUBMIT script
dynamic function sortDxByV4Axis(dx_code[], dx_rank[], dx_axis[], stripdots, axis1[], axis2[], axis3[]) is x
 dx_code[] is x
 dx_rank[] is x
 dx_axis[] is x
 stripdots is X
 axis1[]   is x
 axis2[]   is x
 axis3[]   is x
 rc        is i
 index     is i
 delim_str is x
 dx[,]     is x
 axis      is i
 level     is i
 $clear(axis1[],axis2[],axis3[], dx[,])
 $allowupdate(axis1[],axis2[],axis3[])
 index = 0
 do while index++ < $maxarray(dx_code[])
  axis = $casti(dx_axis[index])
  level = $casti(dx_rank[index])
  if stripdots = "TRUE"
   dx_code[index] = $replace(".","",dx_code[index])
  endif
  dx[axis,level] = dx_code[index]
 enddo
 axis1[] = dx[1]
 axis2[] = dx[2]
 axis3[] = dx[3]
 rc = $arrcompress(axis1[])
 rc = $arrcompress(axis2[])
 rc = $arrcompress(axis3[])

 rc = $putds(axis1[], delim_str, "|")
 delim_str += "|"
 rc = $putds(axis2[], delim_str, "|")
 delim_str += "|"
 rc = $putds(axis3[], delim_str, "|")
 sortDxByV4Axis = delim_str
end sortDxByV4Axis

public dynamic function getClientAxis4(client_id, as_of_date, dx_rec, dx_date, dx_4_a, dx_4_b, dx_4_c, dx_4_d, dx_4_e, dx_4_f, dx_4_g, dx_4_h, dx_4_i, dx_4_j) is i
 client_id  is x
 as_of_date is d
 dx_rec     is uid
 dx_date    is d

 dx_4_a     is x
 dx_4_b     is x
 dx_4_c     is x
 dx_4_d     is x
 dx_4_e     is x
 dx_4_f     is x
 dx_4_g     is x
 dx_4_h     is x
 dx_4_i     is x
 dx_4_j     is x

 $clear(dx_4_a, dx_4_b, dx_4_c, dx_4_d, dx_4_e, dx_4_f, dx_4_g, dx_4_h, dx_4_i, dx_4_j)
 $allowupdate(dx_4_a, dx_4_b, dx_4_c, dx_4_d, dx_4_e, dx_4_f, dx_4_g, dx_4_h, dx_4_i, dx_4_j)
 if dx_rec dp
  getClientAxis4 = $dbreaduid(dx_rec, 2, client_id, dx10_dstlist)
 else 
  if as_of_date !dp
   as_of_date = $today
  endif
  getClientAxis4 = $dbread(2,client_id,dx10_dstlist)
  do while c.dx10.dt > as_of_date
   getClientAxis4 = $dbreadnextdst(2,client_id,dx10_dstlist) 
  enddo 
 endif

 dx_4_a  = c.dx10.a4.supgrp
 dx_4_b  = c.dx10.a4.socenv
 dx_4_c  = c.dx10.a4.edu
 dx_4_d  = c.dx10.a4.occ
 dx_4_e  = c.dx10.a4.housng
 dx_4_f  = c.dx10.a4.eco
 dx_4_g  = c.dx10.a4.health
 dx_4_h  = c.dx10.a4.legal
 dx_4_i  = c.dx10.a4.psyenv
 dx_4_j  = c.dx10.a4.none
end getClientAxis4

function getClientGaf(client_id, as_of_date, dx_rec, dx_date, dx_gaf_cur, dx_gaf_pre, dx_abl_cur, dx_abl_pot) is i
 client_id  is x
 as_of_date is d
 dx_rec     is uid
 dx_date    is d
 dx_gaf_cur is b
 dx_gaf_pre is b
 dx_abl_cur is x
 dx_abl_pot is x

 $allowupdate(dx_gaf_cur, dx_gaf_pre, dx_abl_cur, dx_abl_pot)

 if dx_rec dp
    getClientGaf = $dbreaduid(dx_rec, 2, client_id, dx10_dstlist)
 else
   if as_of_date !dp
    as_of_date = $today
   endif
   getClientGaf = $dbread(2,client_id,dx10_dstlist)
   do while c.dx10.dt > as_of_date
    getClientGaf = $dbreadnextdst(2,client_id,dx10_dstlist) 
   enddo 
 endif
 dx_date = c.dx10.dt
 dx_gaf_cur = c.dx10.a5.gaf
 dx_abl_cur = c.dx10.curr.abl
 dx_abl_pot = c.dx10.pot.abl
'HFC:Not sending previous, otherwise uncomment below
 $clear(dx_gaf_pre)
' (void)$dbreadnextdst(2,client_id,dx10_dstlist) 
' dx_gaf_pre = c.dx10.a5.gaf  
end getClientGaf

function getClientAamd(client_id, as_of_date, dx_rec, dx_date, dx_aamd_date, dx_aamd_1, dx_aamd_2, dx_aamd_3, dx_aamd_gen, dx_aamd_anom, dx_aamd_sens, dx_aamd_prec, dx_aamd_conv, dx_aamd_phys, dx_aamd_moto, dx_aamd_mloc, dx_aamd_msev) is i
 client_id    is x
 as_of_date   is d
 dx_rec       is uid
 dx_date      is d
 dx_aamd_date is d
 dx_aamd_1    is x
 dx_aamd_2    is x
 dx_aamd_3    is x
 dx_aamd_gen  is x
 dx_aamd_anom is x
 dx_aamd_sens is x
 dx_aamd_prec is x
 dx_aamd_conv is x
 dx_aamd_phys is x
 dx_aamd_moto is x
 dx_aamd_mloc is x
 dx_aamd_msev is x

 if dx_rec dp
    getClientAamd = $dbreaduid(dx_rec, 2, client_id, dx10_dstlist)
 else
   if as_of_date !dp
    as_of_date = $today
   endif
   getClientAamd = $dbread(2,client_id,dx10_dstlist)
   do while c.dx10.dt > as_of_date
    getClientAamd = $dbreadnextdst(2,client_id,dx10_dstlist) 
   enddo 
 endif

 'variable assignments
 'not implemented

 $allowupdate(dx_date, dx_aamd_date, dx_aamd_1, dx_aamd_2, dx_aamd_3, dx_aamd_gen, dx_aamd_anom, dx_aamd_sens, dx_aamd_prec, dx_aamd_conv, dx_aamd_phys, dx_aamd_moto, dx_aamd_mloc, dx_aamd_msev) 
end getClientAamd 

dynamic function getClientIq(client_id, as_of_date, dx_rec, dx_date, dx_iq, dx_iq_test, dx_iq_date, dx_sq, dx_sq_test, dx_sq_date) is i
 client_id  is x
 as_of_date is d
 dx_rec     is uid
 dx_date    is d
 dx_iq      is x
 dx_iq_test is x
 dx_iq_date is d
 dx_sq      is x
 dx_sq_test is x
 dx_sq_date is d

 $clear(dx_iq, dx_iq_test, dx_iq_date, dx_sq, dx_sq_test, dx_sq_date)

 if dx_rec dp
    getClientIq = $dbreaduid(dx_rec, 2, client_id, dx10_dstlist)
 else
   if as_of_date !dp
    as_of_date = $today
   endif
   getClientIq = $dbread(2,client_id,dx10_dstlist)
   do while c.dx10.dt > as_of_date
    getClientIq = $dbreadnextdst(2,client_id,dx10_dstlist) 
   enddo 
 endif

 dx_iq = c.dx10.iq.score
 dx_iq_date = c.dx10.iq.date
 dx_iq_test = c.dx10.iq.test
 dx_sq = c.dx10.sq.score
 dx_sq_date = c.dx10.sq.date
 dx_sq_test = c.dx10.sq.test

 $allowupdate(dx_date, dx_iq, dx_iq_test, dx_iq_date, dx_sq, dx_sq_test, dx_sq_date)

end getClientIq

public dynamic function MarkAsBatched(client_id, batchdate, record) is i
 client_id is x
 batchdate is d
 record    is uid
 if record !dp
  MarkAsBatched = 99
  return
 endif
 c.dx10.rh[effd] = record[effd]
 c.dx10.caredt = batchdate
 $dblock()
 MarkAsBatched = $dbupdateuid(record, 2, client_id, c.dx10.rh, c.dx10.caredt)
 $dbunlock()
end MarkAsBatched

function DX_9Code_Query(diag_code,legacy_axis,9DOTTED,results[],text) is null
 diag_code   is x
 legacy_axis is x
 9DOTTED     is x
 text is x
 o_sql       is x
 results[]   is x
 rc          is i
 index       is i
 if 9DOTTED !dp
  9DOTTED = "Y"
 else
  9DOTTED = $uc(9DOTTED)
 endif
 if legacy_axis !dp
  legacy_axis = "1"
 endif
 {"LIB-freetds"}setDSN(dsn)
 if 9DOTTED = "Y"
  if text dp
   o_sql = "select [UniqID] from " + ICD9_table + " where [ICD-9_Code_DotNotation] = '" + diag_code + "' and [DSM-4_Axis] = '" + legacy_axis + "' and [ICD-10_Description] like '" + text + "'"
  else
   o_sql = "select [UniqID] from " + ICD9_table + " where [ICD-9_Code_DotNotation] = '" + diag_code + "' and [DSM-4_Axis] = '" + legacy_axis + "'"
  endif 
 else
  if text dp
   o_sql = "select [UniqID] from " + ICD9_table + " where [ICD-9_Code] = '" + diag_code + "' and [DSM-4_Axis] = '" + legacy_axis + "' and [ICD-10_Description] like '" + text + "'"
  else
   o_sql = "select [UniqID] from " + ICD9_table + " where [ICD-9_Code] = '" + diag_code + "' and [DSM-4_Axis] = '" + legacy_axis + "'" 
  endif 
 endif
 rc = {"LIB-freetds"}q(o_sql, results[])
 index = 0
 do while index++ < $maxarray(results[])
  results[index] = $replace("|","",results[index])
 enddo
 $allowupdate(results[])
end DX_9Code_Query

function DX_Uniq_Query9(UniqID) is x
 UniqID  is x
 o_sql   is x
 results is x
 rc      is i
 {"LIB-freetds"}setDSN(dsn)
 o_sql = "select * from " + ICD9_table + " where [UniqID] = '" + uniqid + "'"
 rc = {"LIB-freetds"}q(o_sql, results)
 DX_Uniq_Query9 = results
end DX_Uniq_Query9

function DX_10Code_Query(diag_code,legacy_axis,9DOTTED,results[]) is null
 diag_code   is x
 legacy_axis is x
 9DOTTED     is x
 o_sql       is x
 results[]   is x
 rc          is i
 index       is i
 if 9DOTTED !dp
  9DOTTED = "Y"
 else
  9DOTTED = $uc(9DOTTED)
 endif
 if legacy_axis !dp
  legacy_axis = "1"
 endif
 {"LIB-freetds"}setDSN(dsn)
 if 9DOTTED = "Y"
  o_sql = "select [UniqID] from " + ICD10_table + " where [ICD-9_Code_DotNotation] = '" + diag_code + "' and [DSM-4_Axis] = '" + legacy_axis + "'"
 else
  o_sql = "select [UniqID] from " + ICD10_table + " where [ICD-9_Code] = '" + diag_code + "' and [DSM-4_Axis] = '" + legacy_axis + "'" 
 endif
 rc = {"LIB-freetds"}q(o_sql, results[])
 index = 0
 do while index++ < $maxarray(results[])
  results[index] = $replace("|","",results[index])
 enddo
 $allowupdate(results[])
end DX_10Code_Query

function DX_Code_Query(UniqID,ICD10_9) is x
 UniqID  is x
 ICD10_9 is x
 o_sql   is x
 results is x
 rc      is i
 {"LIB-freetds"}setDSN(dsn)
 select ICD10_9
  case "ICD10"  o_sql = "select [ICD-10_Code] from " + ICD10_table + " where [UniqID] = '" + uniqid + "'" 
  case "ICD9"   o_sql = "select [ICD-9_Code] from " + ICD9_table + " where [UniqID] = '" + uniqid + "'" 
  case "ICD109" o_sql = "select [ICD-10_Code] from " + ICD9_table + " where [UniqID] = '" + uniqid + "'"   
  case other    o_sql = "select [ICD-10_Code] from " + ICD10_table + " where [UniqID] = '" + uniqid + "'" 
 endselect 
 rc = {"LIB-freetds"}q(o_sql, results)
 results = $replace("|","",results)
 DX_Code_Query = results
end DX_Code_Query

public dynamic function icd10recavail(cid) is x
 rc	is i
 cid is x
 rc = $dbread(02,cid,dx10_dstlist)
 if c.dx10.dt dp
  icd10recavail = "Y"
 else
  icd10recavail = "N"
 endif
end icd10recavail

public dynamic function getBillQualifier(asofdate) is x

asofdate       is x

if asofdate < CN_icd10_date then
   getBillQualifier = CN_icd9ansiQual
else 
   getBillQualifier = CN_icd10ansiQual
endif

end getBillQualifier

public dynamic function getBillingDx(client_id, servicetype, servicedate) is x

client_id      is x
servicetype    is x
servicedate    is d

dx10_code[]    is x
dx9_code[]     is x
dx_cat[]       is x

dx-code[]      is x

getClientDx(client_id, servicedate,,,,,, dx10_code[],,,dx9_code[],,dx_cat[])

if servicedate < CN_icd10_date then
   dx-code[] = dx9_code[]
else 
   dx-code[] = dx10_code[]
endif

getBillingDx = getDxByCategory(servicetype, dx-code[], dx_cat[])
end getBillingDx

private dynamic function getDxByCategory(cat-type, dx-list[], dx-cat[]) is x

cat-type    is x
dx-list[]   is x
dx-cat[]    is x

cat-map[]   is x
cat-val[,]  is x

cat         is b
cat-idx     is b
dx-idx      is b

dx-out      is x

'define the map
cat-map[1] = "MH"
cat-map[2] = "SA"
cat-map[3] = "IDD"
cat-map[4] = "PH"

cat-val[1,1] = "TP_"
cat-val[1,2] = "PP"
cat-val[1,3] = "IP"
cat-val[2,1] = "SA"
cat-val[3,1] = "ID"
cat-val[4,1] = "PH"

$clear(dx-out)

cat = $find(cat-type, cat-map[], 1, "F")

if cat = 0 then
   getDxByCategory = "Invalid Category"
   return
endif

cat-idx = 0
do while cat-idx++ < $maxarray(cat-val[cat])
   dx-idx = $find(cat-val[cat, cat-idx], dx-cat[], 1, "P")
   if dx-idx > 0 then
      dx-out = dx-list[dx-idx]
      cat-idx = $maxarray(cat-val[cat])
   endif
enddo

getDxByCategory = $replace(".", "", dx-out)

end getDxByCategory

public dynamic function GETDXFROM10(cid,icd_ver,rtdxtype) is x
 cid         is x
 rtdxtype    is x
 icd_ver     is x
 as_of_date  is x
 dx_rec      is h
 dx_date     is d
 dx_time     is t
 dx_primary  is x
 dx_reason   is x
 dx10_code[] is x
 dx_rank[]   is x
 dx_axis[]   is x
 dx9_code[]  is x
 dx_cat[]    is x  
 arr_index   is i
 DX_TP		 is x
 DX_PP		 is x
 DX_IP		 is x
 DX_SA		 is x
 DX_ID		 is x
 DX_PH		 is x

'Get the arrays of dx10 codes, dx9 codes and dx categories.
 {"lib_DX10"}getClientDx(cid,,,,,,, dx10_code[],,, dx9_code[],, dx_cat[])

'Find Target Population and set the variable TX_TP
 $clear(arr_index)
 arr_index = $find("TP_",dx_cat[],,"P") 
 if arr_index > 0
  select icd_ver
   case "10" DX_TP = dx10_code[arr_index]
   case "9"  DX_TP = dx9_code[arr_index]
  endselect
 else
  $clear(DX_TP)
 endif

'Find Priority Population and set the variable TX_PP
 $clear(arr_index)
 arr_index = $find("PP",dx_cat[],,"F")
 if arr_index > 0
  select icd_ver
   case "10" DX_PP = dx10_code[arr_index]
   case "9"  DX_PP = dx9_code[arr_index]
  endselect
 else
  $clear(DX_PP)
 endif

'Find Ineligible Population and set the variable TX_IP
 $clear(arr_index)
 arr_index = $find("IP",dx_cat[],,"F")
 if arr_index > 0
  select icd_ver
   case "10" DX_IP = dx10_code[arr_index]
   case "9"  DX_IP = dx9_code[arr_index]
  endselect
 else
  $clear(DX_IP)
 endif

'Find Substance Abuse and set the variable TX_SA
 $clear(arr_index)
 arr_index = $find("SA",dx_cat[],,"F")
 if arr_index > 0
  select icd_ver
   case "10" DX_SA = dx10_code[arr_index]
   case "9"  DX_SA = dx9_code[arr_index]
  endselect
 else
  $clear(DX_SA)
 endif

'Find Intellectual Disability and set the variable TX_ID
 $clear(arr_index)
 arr_index = $find("ID",dx_cat[],,"F")
 if arr_index > 0
  select icd_ver
   case "10" DX_ID = dx10_code[arr_index]
   case "9"  DX_ID = dx9_code[arr_index]
  endselect
 else
  $clear(DX_ID)
 endif

'Find Physical Health and set the variable TX_PH
$clear(arr_index)
 arr_index = $find("PH",dx_cat[],,"F")
 if arr_index > 0
  select icd_ver
   case "10" DX_PH = dx10_code[arr_index]
   case "9"  DX_PH = dx9_code[arr_index]
  endselect
 else
  $clear(DX_PH)
 endif

'Determine which DX to the function returns to the script
 select rtdxtype
  case "MH"	if DX_TP dp
			 getdxfrom10 = DX_TP
		    elseif DX_PP dp
			 getdxfrom10 = DX_PP
		    elseif DX_PP dp
			 getdxfrom10 = DX_PP
		    else
			 $clear(getdxfrom10)
		    endif
  case "SA" if DX_SA dp
			 getdxfrom10 = DX_SA
		    else
			 $clear(getdxfrom10)
		    endif
  case "IDD" if DX_ID dp
			  getdxfrom10 = DX_ID
		     else
		   	  $clear(getdxfrom10)
		     endif
  case "PH" if DX_PH dp
			 getdxfrom10 = DX_PH
		    else
			 $clear(getdxfrom10)
		    endif
 endselect
end GETDXFROM10

function dst_value(regid,dst_number,dst_name) is x
 regid        is x
 dst_number   is i
 dst_name     is x
 myvar_hdr    is var
 myvar        is var
 dst_info[]   is x
 dst_edit_num is i
 dst_code     is x
 rc_dstinfo   is i
 rc_dbread    is i
 if dst_number dp
  rc_dstinfo = $dstinfo(dst_number,dst_info[],dst_edit_num,dst_code)
 else
  dst_name = $uc(dst_name) 
  rc_dstinfo = $dstinfo(dst_name,dst_info[],dst_edit_num,dst_code)  
 endif 
 if rc_dstinfo = 0
  $setvarname(myvar,dst_info[2])
  $setvartype(myvar,dst_info[5])
  if dst_info[9] !dp
   rc_dbread = $dbread($casti(dst_info[4]),regid,myvar)
  else
   $setvarname(myvar_hdr,dst_info[16])
   $setvartype(myvar_hdr,"H")
   rc_dbread = $dbread($casti(dst_info[4]),regid,myvar_hdr,myvar)
  endif
 endif
 dst_value = myvar
end dst_value

public dynamic function getDxBatchTrans(dx_rec, asofdate, compcode, batchno, trans_date, transcount, userid, 
   client-id, client_careid, client_last, client_sufx, client_first, client_middle) is x
 dx_rec         is uid
 asofdate       is d
 compcode       is i
 batchno        is x
 trans_date     is d
 transcount     is i
 userid         is x
 client-id      is x
 client_Careid  is x
 client_last    is x
 client_sufx    is x
 client_first   is x
 client_middle  is x
                
'transaction    
 trans_code_dx  is i
 trans_vers_dx  is x
'dx             
 dx_date        is d
 dx_time        is t
 dx_primary     is x
 dx_reason      is x
 dx10_code[]    is x
 dx_rank[]      is x
 dx_axis[]      is x
 dx09_code[]    is x
                
 dx_axis_vers   is x
 dx_axis3_vers  is x
' dx_aamd_vers   is x
 trans_aamd_ver is x
 dx_rec_type    is i
                
 dx_4_a         is x
 dx_4_b         is x 
 dx_4_c         is x
 dx_4_d         is x
 dx_4_e         is x
 dx_4_f         is x
 dx_4_g         is x
 dx_4_h         is x
 dx_4_i         is x
 dx_4_j         is x
                
 dx_gaf_cur     is x
 dx_gaf_pre     is x
 dx_abl_cur     is x
 dx_abl_pot     is x
                
 dx_aamd_1      is x
 dx_aamd_2      is x
 dx_aamd_3      is x
 dx_aamd_gen    is x
 dx_aamd_anom   is x
 dx_aamd_sens   is x
 dx_aamd_prec   is x
 dx_aamd_conv   is x
 dx_aamd_phys   is x
 dx_aamd_moto   is x
 dx_aamd_mloc   is x
 dx_aamd_msev   is x
 dx_aamd_date   is d
 dx_iq          is i
 dx_iq_test     is i
 dx_iq_date     is d
 dx_sq          is i
 dx_sq_test     is i
 dx_sq_date     is d
                
 dx_code[]      is x
 axis1[]        is x
 axis2[]        is x
 axis3[]        is x
                
 dx_ax3_date    is d
 
 stripdots      is x
                
 phys_rec_num   is i
 rec_length     is i
                
 outrec         is x
 prefix         is x
 
 
 %define LEVEL_ONE 1
 %define LEVEL_TWO 2
 %define LEVEL_THREE 3
 %define LEVEL_FOUR 4
 %define LEVEL_FIVE 5
 %define LEVEL_SIX 6
 %define CN_axis_ver_9 "04"
 %define CN_axis3_ver_9 "09"
 %define CN_axis_ver_10 "10"
 %define CN_axis3_ver_10 "10"
 
 $allowupdate(dx_rec)
 
'Batch requires No Dots
 stripdots = "TRUE"
 rec_length = 80
 trans_code_dx = 15
 trans_vers_dx = "C"
 trans_aamd_ver = "77"
 dx_rec_type = 1
 
 $clear(getDxBatchTrans)
 
'get the earliest unbatched dx record
 getUnbatchCltDx(client-id, trans_date, dx_rec, dx_date, dx_time, dx_primary, dx_reason, 
    dx10_code[], dx_rank[], dx_axis[], dx09_code[])
 
'bail if we don't have an unbatched dx record
 if dx_rec !dp
   return
 endif
 
 'unsubmitted records a year or older cannot be submitted
 if dx_date <= `$dateoffset(trans_date, -365)`
  return
 endif 
 
 if dx_date < CN_ICD10_DATE
  dx_code[] = dx09_code[]
  dx_axis_vers = CN_axis_ver_9
  dx_axis3_vers = CN_axis3_ver_9
 else 
  dx_code[] = dx10_code[]
  dx_axis_vers = CN_axis_ver_10 
  dx_axis3_vers = CN_axis3_ver_10
 endif
 
 sortDxByV4Axis(dx_code[], dx_rank[], dx_axis[], stripdots, axis1[], axis2[], axis3[])
 
 'get the reset of the dx values
 getClientAxis4(client-id, $today, dx_rec, , 
    dx_4_a, dx_4_b, dx_4_c, dx_4_d, dx_4_e, dx_4_f, dx_4_g, dx_4_h, dx_4_i, dx_4_j)
 
 getClientGaf(client-id, $today, dx_rec, , dx_gaf_cur, dx_gaf_pre, dx_abl_cur, dx_abl_pot)
 getClientAamd(client-id, $today, dx_rec, , dx_aamd_date, dx_aamd_1, dx_aamd_2, dx_aamd_3, 
    dx_aamd_gen, dx_aamd_anom, dx_aamd_sens, dx_aamd_prec, dx_aamd_conv, dx_aamd_phys, dx_aamd_moto, 
    dx_aamd_mloc, dx_aamd_msev)
 getClientIq(client-id, $today, dx_rec, , dx_iq, dx_iq_test, dx_iq_date, dx_sq, dx_sq_test, dx_sq_date)
 
 ' map axis 4 for batch values
 if dx_4_j = "Y"
  dx_4_a = "J"
  dx_4_b = ""
  dx_4_c = ""
  dx_4_d = ""
  dx_4_e = ""
  dx_4_f = ""
  dx_4_g = ""
  dx_4_h = ""
  dx_4_i = ""
 else
  if dx_4_a = "Y"
   dx_4_a = "A"
  endif
  if dx_4_b = "Y"
   dx_4_b = "B"
  endif
  if dx_4_c = "Y"
   dx_4_c = "C"
  endif
  if dx_4_d = "Y"
   dx_4_d = "D"
  endif
  if dx_4_e = "Y"
   dx_4_e = "E"
  endif
  if dx_4_f = "Y"
   dx_4_f = "F"
  endif
  if dx_4_g = "Y"
   dx_4_g = "G"
   endif
  if dx_4_H = "Y"
   dx_4_H = "H"
   endif
  if dx_4_i = "Y"
   dx_4_i = "I"
  endif
 endif

 'the axis 3 date should be the same as the dx date
 dx_ax3_date = dx_date
 'unless there is not axis 3 dx
 if axis3[1] = "NONE" or axis3[] !dp then
    $clear(dx_ax3_date)
 endif
 
'build the physical record prefix
 prefix = putPhysicalTrans(13,
    COMPCODE, "999",
    dx_rec_type, "9",
    trans_code_dx, "99",
    trans_vers_dx, "~",
    Transcount, "999999")
 
 'line 1
 phys_rec_num = 1
 
 'outrec = prefix
 outrec += putPhysicalTrans(rec_length,
    COMPCODE, "999",
    dx_rec_type, "9",
    trans_code_dx, "99",
    trans_vers_dx, "~",
    Transcount, "999999",
    phys_rec_num, "99",
    BATCHNO, "~~",
    trans_date, "YYYYMMDD",
    USERID, "~~~~~",
    client-id, "~~~~~~~~~~",
    client_careid, "~~~~~~~~~~",
    client_last, "~~~~~~~~~~~~~~~~",
    client_sufx, "~~~",
    client_first, "~~~~~~~~~~~")
 
 'line 2
 phys_rec_num = 2
 
 'outrec += prefix
 outrec += putPhysicalTrans(rec_length,
    COMPCODE, "999",
    dx_rec_type, "9",
    trans_code_dx, "99",
    trans_vers_dx, "~",
    Transcount, "999999",
    phys_rec_num, "99",
    client_middle, "~~~~~~~~~~",
    dx_date, "YYYYMMDD",
    dx_time, "HHMM",
    dx_reason, "~",
    dx_primary, "~",
    axis1[LEVEL_ONE], "~~~~~~~",
    axis1[LEVEL_TWO], "~~~~~~~",
    axis1[LEVEL_THREE], "~~~~~~~",
    axis1[LEVEL_FOUR], "~~~~~~~",
    axis1[LEVEL_FIVE], "~~~~~~~")
 
 'line 3
 phys_rec_num = 3
 'outrec += prefix
 outrec += putPhysicalTrans(rec_length,
    COMPCODE, "999",
    dx_rec_type, "9",
    trans_code_dx, "99",
    trans_vers_dx, "~",
    Transcount, "999999",
    phys_rec_num, "99",
    axis1[LEVEL_SIX], "~~~~~~~",     'finish off the record we started in the last physical record
    axis2[LEVEL_ONE], "~~~~~~~",
    axis2[LEVEL_TWO], "~~~~~~~",
    axis2[LEVEL_THREE], "~~~~~~~",
    axis2[LEVEL_FOUR], "~~~~~~~",
    "", "~~~~~~~~~~~~~~~",                'filler
    dx_abl_cur, "~",
    dx_abl_pot, "~",
    dx_aamd_1, "~~~",
    dx_aamd_2, "~~~",
    dx_aamd_3, "~~~",
    dx_aamd_gen, "~~",
    dx_aamd_anom, "~~")
 
 'line 4
 phys_rec_num = 4
 'outrec += prefix
 
 outrec += putPhysicalTrans(rec_length,
    COMPCODE, "999",
    dx_rec_type, "9",
    trans_code_dx, "99",
    trans_vers_dx, "~",
    Transcount, "999999",
    phys_rec_num, "99",
    dx_aamd_sens, "~~",
    dx_aamd_prec, "~~",
    dx_aamd_conv, "~~",
    dx_aamd_phys, "~~",
    dx_aamd_moto, "~~",
    dx_aamd_mloc, "~",
    dx_aamd_msev, "~",
    dx_aamd_date, "YYYYMMDD",
    dx_iq, "999",
    dx_iq_test, "99",
    dx_iq_date, "YYYYMMDD",
    dx_sq, "999",
    dx_sq_test, "99",
    dx_sq_date, "YYYYMMDD",
    trans_aamd_ver, "~~",
    dx_axis_vers, "~~",
    dx_axis3_vers, "~~",
    dx_gaf_cur, "~~",
    dx_gaf_pre, "~~",
    dx_4_a, "~",
    dx_4_b, "~",
    dx_4_c, "~",
    dx_4_d, "~",
    dx_4_e, "~",
    dx_4_f, "~",
    dx_4_g, "~",
    dx_4_h, "~",
    dx_4_i, "~")
 
 'line 5
 phys_rec_num = 5
 'outrec += prefix
 
 outrec += putPhysicalTrans(rec_length,
    COMPCODE, "999",
    dx_rec_type, "9",
    trans_code_dx, "99",
    trans_vers_dx, "~",
    Transcount, "999999",
    phys_rec_num, "99",
    axis3[LEVEL_ONE], "~~~~~~~",
    axis3[LEVEL_TWO], "~~~~~~~",
    axis3[LEVEL_THREE], "~~~~~~~",
    axis3[LEVEL_FOUR], "~~~~~~~",
    axis3[LEVEL_FIVE], "~~~~~~~",
    axis3[LEVEL_SIX], "~~~~~~~",
    dx_ax3_date, "YYYYMMDD")
 
 getDxBatchTrans = outrec

end getDxBatchTrans

private dynamic function putPhysicalTrans(
   rec_length,
   value0, format0,
   value1, format1,
   value2, format2,
   value3, format3,
   value4, format4,
   value5, format5,
   value6, format6,
   value7, format7,
   value8, format8,
   value9, format9,
   value10, format10,
   value11, format11,
   value12, format12,
   value13, format13,
   value14, format14,
   value15, format15,
   value16, format16,
   value17, format17,
   value18, format18,
   value19, format19,
   value20, format20,
   value21, format21,
   value22, format22,
   value23, format23,
   value24, format24,
   value25, format25,
   value26, format26,
   value27, format27,
   value28, format28,
   value29, format29,
   value31, format31,
   value32, format32,
   value33, format33,
   value34, format34,
   value35, format35,
   value36, format36,
   value37, format37,
   value38, format38,
   value39, format39) is x

 rec_length  is i
 value0   is v  format0  is x
 value1   is v  format1  is x
 value2   is v  format2  is x
 value3   is v  format3  is x
 value4   is v  format4  is x
 value5   is v  format5  is x
 value6   is v  format6  is x
 value7   is v  format7  is x
 value8   is v  format8  is x
 value9   is v  format9  is x
 value10   is v  format10  is x
 value11   is v  format11  is x
 value12   is v  format12  is x
 value13   is v  format13  is x
 value14   is v  format14  is x
 value15   is v  format15  is x
 value16   is v  format16  is x
 value17   is v  format17  is x
 value18   is v  format18  is x
 value19   is v  format19  is x
 value20   is v  format20  is x
 value21   is v  format21  is x
 value22   is v  format22  is x
 value23   is v  format23  is x
 value24   is v  format24  is x
 value25   is v  format25  is x
 value26   is v  format26  is x
 value27   is v  format27  is x
 value28   is v  format28  is x
 value29   is v  format29  is x
 value30   is v  format30  is x
 value31   is v  format31  is x
 value32   is v  format32  is x
 value33   is v  format33  is x
 value34   is v  format34  is x
 value35   is v  format35  is x
 value36   is v  format36  is x
 value37   is v  format37  is x
 value38   is v  format38  is x
 value39   is v  format39  is x
 
 pad   is i
 
 putPhysicalTrans = ""
 putPhysicalTrans += addField(value0, format0)
 putPhysicalTrans += addField(value1, format1)
 putPhysicalTrans += addField(value2, format2)
 putPhysicalTrans += addField(value3, format3)
 putPhysicalTrans += addField(value4, format4)
 putPhysicalTrans += addField(value5, format5)
 putPhysicalTrans += addField(value6, format6)
 putPhysicalTrans += addField(value7, format7)
 putPhysicalTrans += addField(value8, format8)
 putPhysicalTrans += addField(value9, format9)
 putPhysicalTrans += addField(value10, format10)
 putPhysicalTrans += addField(value11, format11)
 putPhysicalTrans += addField(value12, format12)
 putPhysicalTrans += addField(value13, format13)
 putPhysicalTrans += addField(value14, format14)
 putPhysicalTrans += addField(value15, format15)
 putPhysicalTrans += addField(value16, format16)
 putPhysicalTrans += addField(value17, format17)
 putPhysicalTrans += addField(value18, format18)
 putPhysicalTrans += addField(value19, format19)
 putPhysicalTrans += addField(value20, format20)
 putPhysicalTrans += addField(value21, format21)
 putPhysicalTrans += addField(value22, format22)
 putPhysicalTrans += addField(value23, format23)
 putPhysicalTrans += addField(value24, format24)
 putPhysicalTrans += addField(value25, format25)
 putPhysicalTrans += addField(value26, format26)
 putPhysicalTrans += addField(value27, format27)
 putPhysicalTrans += addField(value28, format28)
 putPhysicalTrans += addField(value29, format29)
 putPhysicalTrans += addField(value30, format30)
 putPhysicalTrans += addField(value31, format31)
 putPhysicalTrans += addField(value32, format32)
 putPhysicalTrans += addField(value33, format33)
 putPhysicalTrans += addField(value34, format34)
 putPhysicalTrans += addField(value35, format35)
 putPhysicalTrans += addField(value36, format36)
 putPhysicalTrans += addField(value37, format37)
 putPhysicalTrans += addField(value38, format38)
 putPhysicalTrans += addField(value39, format39)
 
 pad = rec_length - $len(putPhysicalTrans)
 if pad < 0
  putPhysicalTrans = "Error - Physical Record Too Long"
  $abort(1, putPhysicalTrans)
  return
 endif
 if pad > 0
  putPhysicalTrans += $mchar(" ", pad)
 endif
 
 putPhysicalTrans += x"0a" 
end putPhysicalTrans
 
 private dynamic function addField(val, form) is x
 val      is v
 form     is x 

 addField = ""
 if form dp
  addField = $formatf(val, form)
'fix the time fields
  if $vartype(val) = "T"
    addField = $replace(" ", "0", addField)
  endif
 endif
end addField

function IsDXCodeLapsed(uniqid,dx_date,ICD10_9) is x
 uniqid  is x
 ICD10_9 is x
 dx_date is d
 o_sql   is x
 rc      is i
 results is x
 {"LIB-freetds"}setDSN(dsn) 
 select ICD10_9
  case "ICD10" o_sql = "select [EndDt] from " + ICD10_table + " where [UniqID] = '" + uniqid + "' and [EndDt] <= '" + dx_date + "'"    
  case "ICD9"  o_sql = "select [EndDt] from " + ICD9_table + " where [UniqID] = '" + uniqid + "' and [EndDt] <= '" + dx_date + "'"
 case other    o_sql = "select [EndDt] from " + ICD10_table + " where [UniqID] = '" + uniqid + "' and [EndDt] <= '" + dx_date + "'"
 endselect 
 rc = {"LIB-freetds"}q(o_sql, results)
 results = $replace("|","",results)
 if results dp
  IsDXCodeLapsed = "Y"
 else
  IsDXCodeLapsed = "N"
 endif  
end IsDXCodeLapsed

function ICD10_Desc(UniqID,ICD10_9) is x
 UniqID     is x
 ICD10_9    is x
 result     is x
 if ICD10_File dp and ICD9_File dp
  select ICD10_9
   case "ICD10"   (void)$unix(`"grep " + UniqID + " " + ICD10_File + "|awk -F" + x"22" + "\t" + x"22" + " '{print $2}'"`,result)
   case "ICD9"    (void)$unix(`"grep " + UniqID + " " + ICD9_File + "|awk -F" + x"22" + "\t" + x"22" + " '{print $2}'"`,result)
   case "ICD109"  (void)$unix(`"grep " + UniqID + " " + ICD10_File + "|awk -F" + x"22" + "\t" + x"22" + " '{print $3}'"`,result)
   case other     (void)$unix(`"grep " + UniqID + " " + ICD10_File + "|awk -F" + x"22" + "\t" + x"22" + " '{print $2}'"`,result)
  endselect
 endif
 if result dp
  ICD10_Desc = result
 else
  ICD10_Desc = $funcname + " Error"
 endif
end ICD10_Desc
